#!/bin/bash


if [[ "$1" == "-deep" ]]; then
  echo "üîç Scanning for sub-projects..."
  
  find . -type f \( \
    -name "Dockerfile" -o \
    -name "docker-compose.yml" -o \
    -name "pyproject.toml" -o \
    -name "main.py" -o \
    -name "package.json" -o \
    -name "Cargo.toml" -o \
    -name "main.go" -o \
    -name "*.java" -o \
    -name "pom.xml" -o \
    -name "build.gradle.kts" -o \
    -name "*.cpp" -o -name "*.c" -o \
    -name "*.csproj" -o \
    -name "index.php" -o \
    -name "main.rb" -o \
    -name "mix.exs" \
  \) -exec dirname {} \; | sort -u | while read -r dir; do
    echo ""
    echo "üìÅ Entering: $dir"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    (
      cd "$dir" || continue
      "$0"  # run the same script again (no -deep)
    )
    echo "‚úÖ Finished: $dir"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  done

  exit 0
fi

# -------------------------------------------
# üîΩ Your original run logic below
# -------------------------------------------

run_python() {
  echo "üü® Python project detected."
  if [ -f "pyproject.toml" ]; then
    if command -v poetry &> /dev/null; then
      poetry run python main.py
    else
      echo "‚ùó Poetry not installed. Falling back to python3."
      python3 main.py
    fi
  else
    python3 main.py
  fi
}

run_node() {
  echo "üü¶ Node.js project detected."
  if jq -e '.scripts.dev' package.json > /dev/null 2>&1; then
    npm run dev
  elif jq -e '.scripts.start' package.json > /dev/null 2>&1; then
    npm start
  else
    node index.js
  fi
}

run_typescript() {
  echo "üü™ TypeScript project detected."
  if command -v ts-node &> /dev/null; then
    ts-node index.ts
  else
    echo "‚ùó ts-node not installed."
  fi
}

run_next() {
  echo "‚ö° Next.js project detected."
  npm run dev
}

run_react_vite() {
  echo "‚öõÔ∏è React (Vite) project detected."
  npm run dev
}

run_vue() {
  echo "üü© Vue project detected."
  npm run serve
}

run_svelte() {
  echo "üî• Svelte project detected."
  npm run dev
}

run_rust() {
  echo "üü• Rust project detected."
  cargo run
}

run_go() {
  echo "üü© Go project detected."
  go run main.go
}

run_java() {
  echo "‚òï Java project detected."
  javac Main.java && java Main
}

run_kotlin() {
  echo "üü™ Kotlin project detected."
  ./gradlew run
}

run_cpp() {
  echo "üîµ C/C++ project detected."
  if [ -f "Makefile" ]; then
    make
  else
    g++ *.cpp -o out && ./out
  fi
}

run_csharp() {
  echo "üü¶ .NET project detected."
  dotnet run
}

run_php() {
  echo "üêò PHP project detected."
  php index.php
}

run_ruby() {
  echo "üíé Ruby project detected."
  ruby main.rb
}

run_elixir() {
  echo "üíú Elixir project detected."
  mix run
}

run_docker() {
  echo "üê≥ Docker project detected."
  if [ -f "docker-compose.yml" ]; then
    docker-compose up
  else
    docker build -t app . && docker run app
  fi
}

# Detection logic
if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
  run_docker
elif [ -f "pyproject.toml" ] || [ -f "main.py" ]; then
  run_python
elif [ -f "package.json" ]; then
  if grep -q '"next"' package.json; then
    run_next
  elif [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then
    run_react_vite
  elif [ -f "vue.config.js" ]; then
    run_vue
  elif [ -f "svelte.config.js" ]; then
    run_svelte
  elif [ -f "tsconfig.json" ]; then
    run_typescript
  else
    run_node
  fi
elif [ -f "Cargo.toml" ]; then
  run_rust
elif [ -f "main.go" ]; then
  run_go
elif ls *.java &> /dev/null || [ -f "pom.xml" ]; then
  run_java
elif [ -f "build.gradle.kts" ]; then
  run_kotlin
elif ls *.cpp &> /dev/null || ls *.c &> /dev/null; then
  run_cpp
elif ls *.csproj &> /dev/null; then
  run_csharp
elif [ -f "index.php" ]; then
  run_php
elif [ -f "Gemfile" ] || [ -f "main.rb" ]; then
  run_ruby
elif [ -f "mix.exs" ]; then
  run_elixir
else
  echo "‚ùå Could not detect project type."
  exit 1
fi
