#!/bin/bash

set -e

# -------------------------------------------
# --log flag (before any output)
# -------------------------------------------
LOG_ENABLED=false
LOG_FILE="vroom.log"

for arg in "$@"; do
  if [[ "$arg" == --log=* ]]; then
    LOG_ENABLED=true
    LOG_FILE="${arg#--log=}"
  elif [[ "$arg" == "--log" ]]; then
    LOG_ENABLED=true
  fi
done

if [ "$LOG_ENABLED" = true ]; then
  exec > >(tee -a "$LOG_FILE") 2>&1
  echo "📝 Logging enabled — all output will be saved to $LOG_FILE"
fi

# -------------------------------------------
# Identify project type
# -------------------------------------------
get_project_type() {
  if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then echo "🐳 Docker"; return; fi
  if [ -f "pyproject.toml" ] || [ -f "main.py" ]; then echo "🟨 Python"; return; fi
  if [ -f "package.json" ]; then
    if grep -q '"next"' package.json; then echo "⚡ Next.js"; return; fi
    if [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then echo "⚛️ React (Vite)"; return; fi
    if [ -f "vue.config.js" ]; then echo "🟩 Vue"; return; fi
    if [ -f "svelte.config.js" ]; then echo "🔥 Svelte"; return; fi
    if [ -f "tsconfig.json" ]; then echo "🟪 TypeScript"; return; fi
    echo "🟦 Node.js"; return
  fi
  if [ -f "Cargo.toml" ]; then echo "🟥 Rust"; return; fi
  if [ -f "main.go" ]; then echo "🟩 Go"; return; fi
  if ls *.java &> /dev/null || [ -f "pom.xml" ]; then echo "☕ Java"; return; fi
  if [ -f "build.gradle.kts" ]; then echo "🟪 Kotlin"; return; fi
  if ls *.cpp &> /dev/null || ls *.c &> /dev/null; then echo "🔵 C/C++"; return; fi
  if ls *.csproj &> /dev/null; then echo "🟦 .NET"; return; fi
  if [ -f "index.php" ]; then echo "🐘 PHP"; return; fi
  if [ -f "Gemfile" ] || [ -f "main.rb" ]; then echo "💎 Ruby"; return; fi
  if [ -f "mix.exs" ]; then echo "💜 Elixir"; return; fi
  echo ""
}

# -------------------------------------------
# Auto-install dependencies
# -------------------------------------------
auto_install_if_needed() {
  if [ -f ".installed" ]; then return; fi

  if [ -f "package-lock.json" ] || [ -f "yarn.lock" ] || [ -f "pnpm-lock.yaml" ]; then
    echo "📦 Installing Node dependencies..."
    if [ -f "yarn.lock" ]; then yarn install; elif [ -f "pnpm-lock.yaml" ]; then pnpm install; else npm install; fi
  elif [ -f "requirements.txt" ]; then
    echo "🐍 Installing Python requirements.txt..."
    pip install -r requirements.txt
  elif [ -f "pyproject.toml" ]; then
    echo "🐍 Installing Python (pyproject)..."
    if command -v poetry &> /dev/null; then poetry install; else pip install .; fi
  elif [ -f "Cargo.lock" ]; then
    echo "🦀 Installing Rust dependencies..."
    cargo build > /dev/null
  elif [ -f "Gemfile.lock" ]; then
    echo "💎 Installing Ruby dependencies..."
    bundle install
  fi

  touch .installed
}

# -------------------------------------------
# Run command based on project
# -------------------------------------------
run_project() {

  # Load venv if present and if --notvenv isn't passed
  if [[ "$*" != *"--notvenv"* && ( -f "pyproject.toml" || -f "main.py" || -f "requirements.txt" ) ]]; then
    for venv_dir in ".venv" "venv" "env"; do
      if [ -d "$venv_dir" ] && [ -f "$venv_dir/bin/activate" ]; then
        echo "🐍 Activating virtual environment: $venv_dir"
        source "$venv_dir/bin/activate"
        break
      fi
    done
  fi

  # load .env if present
  if [ -f ".env" ]; then
    echo "📦 Loading .env"
    set -o allexport
    source .env
    set +o allexport
  fi

  auto_install_if_needed

  if [ -f ".vroomrc" ]; then
    echo "⚙️  Running .vroomrc"
    chmod +x .vroomrc 2>/dev/null
    ./".vroomrc"
    return
  fi

  handle_missing_entrypoint() {
    echo "❓ Could not determine how to run this project."
    echo "👀 You can try:"
    echo "- Adding a dev or start script"
    echo "- Creating a .vroomrc with your run command"
    echo "- Ensuring the main entry file exists"
  }

  if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
    [ -f "docker-compose.yml" ] && docker-compose up || (docker build -t app . && docker run app)
    return
  fi

  if [ -f "pyproject.toml" ] || [ -f "main.py" ]; then
    if command -v poetry &> /dev/null; then
      poetry run python main.py 2>/dev/null || handle_missing_entrypoint
    else
      python3 main.py 2>/dev/null || handle_missing_entrypoint
    fi
    return
  fi

  if [ -f "package.json" ]; then
    if grep -q '"scripts"' package.json; then
      scripts=$(jq -r '.scripts | keys[]' package.json 2>/dev/null)
      if echo "$scripts" | grep -q "^dev$"; then
        npm run dev
      elif echo "$scripts" | grep -q "^start$"; then
        npm start
      else
        echo "⚠️ No 'dev' or 'start' script found in package.json"
        echo "📜 Available scripts:"
        echo "$scripts"
        handle_missing_entrypoint
      fi
    else
      echo "⚠️ package.json has no scripts defined"
      handle_missing_entrypoint
    fi
    return
  fi

  if [ -f "Cargo.toml" ]; then
    grep -q '\[package\]' Cargo.toml && cargo run || handle_missing_entrypoint
    return
  fi

  if [ -f "main.go" ]; then
    go run main.go 2>/dev/null || handle_missing_entrypoint
    return
  fi

  if ls *.java &> /dev/null || [ -f "pom.xml" ]; then
    if [ -f "pom.xml" ]; then
      mvn compile exec:java || handle_missing_entrypoint
    else
      javac Main.java && java Main || handle_missing_entrypoint
    fi
    return
  fi

  if [ -f "build.gradle.kts" ]; then
    ./gradlew run || handle_missing_entrypoint
    return
  fi

  if ls *.cpp &> /dev/null || ls *.c &> /dev/null; then
    g++ *.cpp -o out && ./out || handle_missing_entrypoint
    return
  fi

  if ls *.csproj &> /dev/null; then
    dotnet run || handle_missing_entrypoint
    return
  fi

  if [ -f "index.php" ]; then
    php index.php || handle_missing_entrypoint
    return
  fi

  if [ -f "main.rb" ]; then
    ruby main.rb || handle_missing_entrypoint
    return
  fi

  if [ -f "mix.exs" ]; then
    mix run || handle_missing_entrypoint
    return
  fi

  handle_missing_entrypoint
}


# -------------------------------------------
# --list, --deep, --json
# -------------------------------------------
if [[ "$1" == "--list" ]]; then
  OUTPUT_JSON=false
  [[ "$2" == "--json" || "$3" == "--json" ]] && OUTPUT_JSON=true

  declare -a projects

  if [[ "$2" == "--deep" || "$3" == "--deep" ]]; then
    while IFS= read -r dir; do
      type=$(cd "$dir" && get_project_type)
      [[ -n "$type" ]] && projects+=("$type|$dir")
    done < <(find . -type f \( \
      -name "Dockerfile" -o \
      -name "docker-compose.yml" -o \
      -name "pyproject.toml" -o \
      -name "main.py" -o \
      -name "package.json" -o \
      -name "Cargo.toml" -o \
      -name "main.go" -o \
      -name "*.java" -o \
      -name "pom.xml" -o \
      -name "build.gradle.kts" -o \
      -name "*.cpp" -o -name "*.c" -o \
      -name "*.csproj" -o \
      -name "index.php" -o \
      -name "main.rb" -o \
      -name "mix.exs" \
    \) -exec dirname {} \; | sort -u)
  else
    type=$(get_project_type)
    [[ -n "$type" ]] && projects+=("$type|.")
  fi

  if [ "$OUTPUT_JSON" = true ]; then
    echo "["
    for i in "${!projects[@]}"; do
      IFS='|' read -r type path <<< "${projects[$i]}"
      echo -n "  { \"type\": \"$type\", \"path\": \"$path\" }"
      [[ $i -lt $(( ${#projects[@]} - 1 )) ]] && echo "," || echo
    done
    echo "]"
  else
    echo "📚 Detected Projects:"
    for proj in "${projects[@]}"; do
      IFS='|' read -r type path <<< "$proj"
      echo "$type project at $path"
    done
  fi
  exit 0
fi

# -------------------------------------------
# --deep to run all subprojects
# -------------------------------------------
if [[ "$1" == "--deep" ]]; then
  echo "🚀 Running all subprojects in parallel..."

  find . \( \
    -path '*/node_modules' -o -path '*/.git' -o -path '*/dist' -o \
    -path '*/.next' -o -path '*/build' -o -path '*/out' \
  \) -prune -false -o \
  -type f \( \
    -name "Dockerfile" -o -name "docker-compose.yml" -o \
    -name "pyproject.toml" -o -name "main.py" -o \
    -name "package.json" -o -name "Cargo.toml" -o \
    -name "main.go" -o -name "*.java" -o \
    -name "pom.xml" -o -name "build.gradle.kts" -o \
    -name "*.cpp" -o -name "*.c" -o -name "*.csproj" -o \
    -name "index.php" -o -name "main.rb" -o -name "mix.exs" \
  \) -exec dirname {} \; | sort -u |
  awk '!seen[$0]++' | while read -r dir; do
    (
      echo -e "\n▶️ $dir"
      echo "──────────────────────────────"
      cd "$dir" || exit
      run_project
      echo "✅ Done: $dir"
      echo "──────────────────────────────"
    ) &
  done

  wait
  echo "🎉 All subprojects finished."
  exit 0
fi




# -------------------------------------------
# --supported
# -------------------------------------------
if [[ "$1" == "--supported" ]]; then
  echo "✅ Supported Project Types:"
  echo "🐳 Docker"
  echo "🟨 Python"
  echo "🟦 Node.js"
  echo "⚡ Next.js"
  echo "⚛️ React (Vite)"
  echo "🟩 Vue"
  echo "🔥 Svelte"
  echo "🟪 TypeScript"
  echo "🟥 Rust"
  echo "🟩 Go"
  echo "☕ Java"
  echo "🟪 Kotlin"
  echo "🔵 C/C++"
  echo "🟦 .NET"
  echo "🐘 PHP"
  echo "💎 Ruby"
  echo "💜 Elixir"
  exit 0
fi

# -------------------------------------------
# --help
# -------------------------------------------
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo "🛠 Usage: vroom [options]"
  echo ""
  echo "Options:"
  echo "  --supported          List all supported project types"
  echo "  --list               Detect project in current dir"
  echo "  --list --deep        Recursively detect all subprojects"
  echo "  --list --json        Output JSON format"
  echo "  --deep               Run all subprojects"
  echo "  --log[=file]         Enable logging to file (default: vroom.log)"
  echo "  --help               Show this help message"
  exit 0
fi


run_project
